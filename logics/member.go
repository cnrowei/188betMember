package logics

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"time"

	"../helper"
	"../models"
	"github.com/gin-gonic/gin"
)

func F64string(v float64) string {
	string := strconv.FormatFloat(v, 'f', -3, 64)
	return string
}

func I64string(v int64) string {
	return strconv.FormatInt(v, 10)
}

func WinLossProduct(c *gin.Context) {

	type AutoGenerated struct {
		DateFrom string `json:"DateFrom"`
	}

	type BetSelections struct {
		ID     int     `json:"id"`
		Odds   float64 `json:"odds"`
		MinBet float64 `json:"minBet"`
		MaxBet float64 `json:"maxBet"`
	}

	var datefrom AutoGenerated
	if err := c.BindJSON(&datefrom); err == nil {
		var nowtime string
		if datefrom.DateFrom == "" {
			nowtime = time.Now().Format("2006-01-02 00:00:00")
		} else {
			nowtime = datefrom.DateFrom + " 00:00:00"
		}

		ss, _ := time.ParseDuration("86399s")
		begTime, _ := time.Parse("2006-01-02 15:04:05", nowtime)
		endTime := begTime.Add(ss)

		fmt.Println(begTime)

		ulist, _ := models.GetUsers_Admin(SessionUser.Id)

		b := bytes.Buffer{}
		b.WriteString(`{`)

		b.WriteString(`"SummaryList": [`)
		for i, v := range *ulist {
			wlist, _ := models.GetWagersInTime(v.Id, begTime, endTime)
			if len(*wlist) == 0 {
				continue
			}

			//fmt.Println(err)
			// if err == gorm.ErrRecordNotFound {
			// 	continue
			// }

			var aTotalStake float64
			var aTotalRev float64
			var areturnAmount float64

			var cTotalStake float64
			var cTotalRev float64
			var creturnAmount float64

			var xTotalStake float64
			var xTotalRev float64
			var xreturnAmount float64

			var sel []BetSelections

			for _, w := range *wlist {
				json.Unmarshal([]byte(w.Selections), &sel)
				aTotalStake += w.Stake

				//所有游戏假期来
				if w.Status == 1 {
					areturnAmount = w.Stake * sel[0].Odds
					aTotalRev += areturnAmount
				} else if w.Status == 0 {
					aTotalRev -= w.Stake
					//aTotalRev = aTotalRev - w.Stake
				}

				//重庆
				if w.Counterid == 320 {
					cTotalStake += w.Stake
					if w.Status == 1 {
						creturnAmount = w.Stake * sel[0].Odds
						cTotalRev += creturnAmount
					} else if w.Status == 0 {
						cTotalRev -= w.Stake
						//cTotalRev -= w.Stake
					}
				}

				//重庆
				if w.Counterid == 350 {
					xTotalStake += w.Stake
					if w.Status == 1 {
						xreturnAmount = w.Stake * sel[0].Odds
						xTotalRev += xreturnAmount
					} else if w.Status == 0 {
						xTotalRev -= w.Stake
						//xTotalRev -= w.Stake
					}
				}

			}

			b.WriteString(`{`)
			b.WriteString(`"PaymentFee": 0.0,`)
			b.WriteString(`"PromotionBonus": 0.0,`)
			b.WriteString(`"PlatformFee": 0.0,`)
			b.WriteString(`"TotalAll": {`)
			b.WriteString(`"TotalStake": ` + F64string(aTotalStake) + `,`)
			b.WriteString(`"TotalRev": ` + F64string(aTotalRev) + ``)
			b.WriteString(`},`)
			b.WriteString(`"ProductList": [`)

			b.WriteString(`{`)
			b.WriteString(`"Product": "成都",`)
			b.WriteString(`"TotalStake": ` + F64string(cTotalStake) + `,`)
			b.WriteString(`"TotalRev": ` + F64string(cTotalRev) + ``)
			b.WriteString(`},`)

			b.WriteString(`{`)
			b.WriteString(`"Product": "新疆",`)
			b.WriteString(`"TotalStake":` + F64string(xTotalStake) + `,`)
			b.WriteString(`"TotalRev": ` + F64string(xTotalRev) + ``)
			b.WriteString(`}`)

			b.WriteString(`],`)
			b.WriteString(`"SettlementType": " 四月 2018",`)
			b.WriteString(`"AffCode": "51741",`)
			b.WriteString(`"AffStatus": "通过合作申请",`)
			b.WriteString(`"AffType": "Affiliate",`)
			b.WriteString(`"AffCountry": "CN",`)
			b.WriteString(`"AffCurrency": "` + v.Currency + `",`)
			b.WriteString(`"MemId": "` + I64string(v.Id) + `",`)
			b.WriteString(`"MemCode": "` + v.Username + `",`)
			b.WriteString(`"MemCountry": "CN",`)
			b.WriteString(`"Level": 1`)

			if i < len(*ulist)-1 {
				b.WriteString(`},`)
			} else {
				b.WriteString(`}`)
			}

		}

		b.WriteString(`],`)

		wlist, _ := models.GetWagersAllTime(begTime, endTime)

		var aTotalStake float64
		var aTotalRev float64
		var areturnAmount float64

		var cTotalStake float64
		var cTotalRev float64
		var creturnAmount float64

		var xTotalStake float64
		var xTotalRev float64
		var xreturnAmount float64

		var sel []BetSelections

		for _, w := range *wlist {
			json.Unmarshal([]byte(w.Selections), &sel)
			aTotalStake += w.Stake

			//所有游戏假期来
			if w.Status == 1 {
				areturnAmount = w.Stake * sel[0].Odds
				aTotalRev += areturnAmount
			} else if w.Status == 0 {
				aTotalRev -= w.Stake
				//aTotalRev = aTotalRev - w.Stake
			}

			//重庆
			if w.Counterid == 320 {
				cTotalStake += w.Stake
				if w.Status == 1 {
					creturnAmount = w.Stake * sel[0].Odds
					cTotalRev += creturnAmount
				} else if w.Status == 0 {
					cTotalRev -= w.Stake
					//cTotalRev -= w.Stake
				}
			}

			//重庆
			if w.Counterid == 350 {
				xTotalStake += w.Stake
				if w.Status == 1 {
					xreturnAmount = w.Stake * sel[0].Odds
					xTotalRev += xreturnAmount
				} else if w.Status == 0 {
					xTotalRev -= w.Stake
					//xTotalRev -= w.Stake
				}
			}

		}

		b.WriteString(`"Summary": {`)
		b.WriteString(`"PaymentFee": 0.0,`)
		b.WriteString(`"PromotionBonus": 0.0,`)
		b.WriteString(`"PlatformFee": 0.0,`)
		b.WriteString(`"TotalAll": {`)
		b.WriteString(`"TotalStake": ` + F64string(aTotalStake) + `,`)
		b.WriteString(`"TotalRev": ` + F64string(aTotalRev) + ``)
		b.WriteString(`},`)
		b.WriteString(`"ProductList": [{`)
		b.WriteString(`"Product": "重庆",`)
		b.WriteString(`"TotalStake": ` + F64string(cTotalStake) + `,`)
		b.WriteString(`"TotalRev": ` + F64string(cTotalRev) + ``)
		b.WriteString(`},`)
		b.WriteString(`{`)
		b.WriteString(`"Product": "新疆",`)
		b.WriteString(`"TotalStake": ` + F64string(xTotalStake) + `,`)
		b.WriteString(`"TotalRev": ` + F64string(xTotalRev) + ``)
		b.WriteString(`}],`)
		b.WriteString(`"SettlementType": "",`)
		b.WriteString(`"AffCode": null,`)
		b.WriteString(`"AffStatus": null,`)
		b.WriteString(`"AffType": null,`)
		b.WriteString(`"AffCountry": null,`)
		b.WriteString(`"AffCurrency": null,`)
		b.WriteString(`"MemId": null,`)
		b.WriteString(`"MemCode": null,`)
		b.WriteString(`"MemCountry": null,`)
		b.WriteString(`"Level": 0`)
		b.WriteString(`},`)
		b.WriteString(`"Message": null,`)
		b.WriteString(`"Status": 0,`)
		b.WriteString(`"SettlementType": null,`)
		b.WriteString(`"Params": null`)
		b.WriteString(`}`)

		c.Request.Header.Set("Content-Type", "application/json;charset=UTF-8")
		c.Writer.WriteString(b.String())
	}
}

func MonthList(c *gin.Context) {
	type month struct {
		Value   string `json:"Value"`
		Display string `json:"Display"`
	}

	//strt = ts.Format("2006年01月02日")
	formate1 := "2006年01月02日"
	formate2 := "2006-01-02"
	//day, _ := time.ParseDuration("-1d")
	now := time.Now().AddDate(0, 0, 1)
	var list []month
	//var m month

	for i := 0; i <= 30; i++ {
		now = now.AddDate(0, 0, -1)
		m := month{
			Value:   now.Format(formate2),
			Display: now.Format(formate1),
		}
		list = append(list, m)
	}
	c.JSON(http.StatusOK, &list)
}

func LoginStatus(c *gin.Context) {
	type jsons struct {
		Status bool  `json:"status"`
		Userid int64 `json:"userid"`
	}

	var usr jsons
	var message string
	if err := c.BindJSON(&usr); err == nil {
		if usr.Status {
			message = "该用户已允许登录"
		} else {
			message = "该用户已停止登录"
		}

		err := models.UpUserLogin(usr.Userid, usr.Status)
		if err == nil {
			c.JSON(http.StatusOK, gin.H{
				"Status":  0,
				"Message": message,
				"Params":  nil,
			})
		} else {
			c.JSON(http.StatusOK, gin.H{
				"Status":  1,
				"Message": "更新失败",
				"Params":  nil,
			})
		}
	} else {
		c.JSON(http.StatusOK, gin.H{
			"Status":  1,
			"Message": "Json Data is Bind Error!",
			"Params":  nil,
		})
	}
}

func UserStatus(c *gin.Context) {
	type jsons struct {
		Status bool  `json:"status"`
		Userid int64 `json:"userid"`
	}

	var usr jsons
	var message string
	if err := c.BindJSON(&usr); err == nil {
		if usr.Status {
			message = "该用户已启用收单"
		} else {
			message = "该用户已停止收单"
		}

		err := models.UpUserStatus(usr.Userid, usr.Status)
		if err == nil {
			c.JSON(http.StatusOK, gin.H{
				"Status":  0,
				"Message": message,
				"Params":  nil,
			})
		} else {
			c.JSON(http.StatusOK, gin.H{
				"Status":  1,
				"Message": "更新失败",
				"Params":  nil,
			})
		}
	} else {
		c.JSON(http.StatusOK, gin.H{
			"Status":  1,
			"Message": "Json Data is Bind Error!",
			"Params":  nil,
		})
	}
}

func AddMember(c *gin.Context) {

	type Users struct {
		Username   string        `json:"username"`
		Password   string        `json:"password"`
		Balance    string        `json:"balance"`
		Memberrole int           `json:"memberrole"`
		Errors     []interface{} `json:"errors"`
	}

	// if value, ok := userInfo.(models.Users); ok {
	fmt.Println("SessionUser.Username:", SessionUser.Username)

	//fmt.Println("BINDJSON")
	var usr Users
	if err := c.BindJSON(&usr); err == nil {

		flag := models.FindUser(usr.Username)

		if !flag {

			c.JSON(http.StatusOK, gin.H{
				"Status":  1,
				"Message": "该用户名已经存在",
				"Params":  nil,
			})
			return
		}

		if err != nil {
			c.JSON(http.StatusOK, gin.H{
				"Status":  1,
				"Message": "查询数据有错误",
				"Params":  nil,
			})
			return
		}

		//fmt.Println(flag)

		my, err := models.GetUserInfo(SessionUser.Username)

		if err == nil && my != nil {

			uBalance, err := strconv.ParseFloat(usr.Balance, 64)

			if err != nil {
				c.JSON(http.StatusOK, gin.H{
					"Status":  1,
					"Message": "输入的金额错误",
					"Params":  nil,
				})
				return
			}

			if my.Balance < uBalance {
				c.JSON(http.StatusOK, gin.H{
					"Status":  1,
					"Message": "您账号余额不足",
					"Params":  nil,
				})
				return
			}

			uinfo := &models.Users{}
			uinfo.Username = usr.Username
			uinfo.Password = helper.MD5_16(usr.Password)
			uinfo.Balance = uBalance
			uinfo.Agentid = SessionUser.Id
			uinfo.Role = usr.Memberrole
			uinfo.Currency = "RMB"
			uinfo.Credit = 0
			uinfo.Nowbalance = 0
			uinfo.Btccoin = 0
			uinfo.Ethcoin = 0
			uinfo.Ltbcoin = 0
			uinfo.Online = false
			uinfo.Login = true
			uinfo.Odds = "A"
			uinfo.Status = true
			uinfo.Created = time.Now()
			uinfo.Updated = time.Now()

			if uid, err := models.NewUsers(uinfo); err == nil {
				myBalance := my.Balance - uBalance
				err := models.UpUserBalance(SessionUser.Id, myBalance)

				if err != nil {
					c.JSON(http.StatusOK, gin.H{
						"Status":  1,
						"Message": "添加用户扣款失败",
						"Params":  uid,
					})
				} else {
					c.JSON(http.StatusOK, gin.H{
						"Status":  0,
						"Message": "添加用户成功",
						"Params":  uid,
					})
				}

			} else {
				c.JSON(http.StatusOK, gin.H{
					"Status":  1,
					"Message": "添加用户失败",
					"Params":  nil,
				})
			}

		} else {
			c.JSON(http.StatusOK, gin.H{
				"Status":  1,
				"Message": "登录已经超时",
				"Params":  nil,
			})
		}

	} else {
		c.JSON(http.StatusOK, gin.H{
			"Status":  1,
			"Message": "提交JSON数据有错误",
			"Params":  nil,
		})
	}

	//{"Status":0,"Message":"个人资料成功更新","Params":null}

}
